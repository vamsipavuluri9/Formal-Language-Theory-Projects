Hereâ€™s a README specifically for **Task-1: NDFSM Builder**:

---

# NDFSM Builder

## Overview
This project focuses on creating a **Non-Deterministic Finite State Machine (NDFSM)** from a given pattern. The NDFSM is designed to accept strings that contain the given pattern as a substring. It dynamically generates the transition table based on the pattern and outputs the result in a structured format that can be used for further processing, such as converting it into a Deterministic Finite State Machine (DFSM).

## Features
- Converts any given string pattern into a Non-Deterministic Finite State Machine.
- The transition table is automatically generated based on the pattern.
- Supports dynamic handling of patterns and outputs the NDFSM in a readable format.

## How It Works
1. **Input**: You provide a pattern (a string of lowercase letters) via an input file.
2. **NDFSM Generation**: The program constructs an NDFSM where:
   - States are generated based on the length of the pattern.
   - The transition table defines how the NDFSM moves from one state to another based on input symbols.
   - The final state is the accepting state if the pattern is fully matched as a substring.
3. **Output**: The NDFSM is written to a file in the following format:
   - A list of unique alphabet symbols used in the pattern.
   - A transition table describing the transitions for each state and symbol.
   - The list of accepting states.

## Input Format
The input to the program is a text file containing a string pattern. The string should:
- Contain only lowercase letters (a-z).
- Have no spaces or special characters.

### Example Pattern:
```
abc
```

## Output Format
The output NDFSM is written to `NDFSM.txt` in the following format:
1. **Alphabet Section**: Lists all unique alphabet symbols found in the pattern.
    ```
    a b c
    ```

2. **Transition Table**: Each row represents a state in the NDFSM, and each entry within the row represents the possible next states for each input symbol.
    ```
    [1,2] [1] [1] 
    [-1] [3] [-1] 
    [-1] [-1] [4] 
    [-1] [5] [-1] 
    [5] [5] [5]
    ```

3. **Accepting State**: Lists the accepting states in the NDFSM.
    ```
    5
    ```

i.e., the output file will look like the below:

    a b c

    [1,2] [1] [1] 
    [-1] [3] [-1] 
    [-1] [-1] [4] 
    [-1] [5] [-1] 
    [5] [5] [5]
 
    5


## Usage
1. Provide a file containing the pattern you wish to use for generating the NDFSM.
2. Compile and run the program. The NDFSM will be automatically generated and saved to `NDFSM.txt`.

### Example Usage:
```bash
gcc PatternToNDFSM.c -o PatternToNDFSM
./PatternToNDFSM pattern.txt
```

## Error Handling
- If the pattern contains invalid characters (anything other than lowercase a-z), the program will throw an error.
- If the input file is empty or contains only whitespace, the program will return an error.

## Files
- **PatternToNDFSM.c**: The main program file that constructs the NDFSM.
- **pattern.txt**: An example input file that contains a string pattern.

## Example
For the input pattern:
```
abc
```

The generated `NDFSM.txt` will contain:
```
a b c

[1,2] [1] [1] 
[-1] [3] [-1] 
[-1] [-1] [4] 
[-1] [5] [-1] 
[5] [5] [5]

5
```
