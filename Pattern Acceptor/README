
# Pattern Acceptor

## Overview

The **Pattern Acceptor** is a tool designed to construct an NDFSM based on a given string pattern and convert that NDFSM into a Deterministic Finite State Machine (DFSM). This project helps simulate the acceptance of an input string by the constructed DFSM, answering the fundamental question of whether the input string contains the pattern as a substring.

The program involves three major tasks:
1. **Pattern to NDFSM Construction**: Build an NDFSM from a given pattern.
2. **NDFSM to DFSM Conversion**: Convert the constructed NDFSM into its equivalent DFSM.
3. **String Simulation**: Simulate the DFSM to check if a given input string is accepted (i.e., if the string contains the pattern as a substring).

## Features
- **NDFSM Construction**: The tool takes a pattern (e.g., from `pattern1.txt`) and builds an NDFSM where transitions correspond to substrings of the pattern.
- **DFSM Conversion**: Converts the NDFSM into a DFSM to remove nondeterminism.
- **Input String Check**: Simulates the DFSM and checks if a string (from `input1.txt`) is accepted, printing "Yes" if the string contains the pattern and "No" otherwise.

## Project Structure
The project consists of three tasks:

1. **NDFSM Construction (Task-1)**: Builds an NDFSM using the characters of a given pattern as transitions. The pattern should consist of lowercase alphabets without spaces.
2. **NDFSM to DFSM Conversion (Task-2)**: Converts the NDFSM into an equivalent DFSM. Handles multiple transitions and ensures determinism in the output machine.
3. **DFSM Simulation (Task-3)**: Takes an input string and simulates the DFSM to check if the input contains the pattern.

## File Structure
- **MainProgram.c**: The main program that handles the complete flowâ€”reading a pattern, constructing the NDFSM, converting it to DFSM, and simulating the input string.
- **pattern1.txt**: File that contains the pattern used to construct the NDFSM.
- **input1.txt**: File that contains the input string to check if it contains the pattern.
- **NDFSM.txt**: Intermediate file generated by the program, representing the constructed NDFSM.
- **DFSM.txt**: Final DFSM output file that is used for the string simulation.

## Usage

### Requirements
- C Compiler (e.g., GCC)

### How to Run
1. Clone the repository.
    ```bash
    git clone https://github.com/vamsipavuluri9/NDFSM-Builder.git
    cd NDFSM-Builder
    ```
2. Prepare the `pattern1.txt` and `input1.txt` files.
   - **pattern1.txt**: The file should contain a pattern of lowercase letters (e.g., `abc`).
   - **input1.txt**: The file should contain an input string you wish to check against the DFSM (e.g., `xabcy`).

3. Compile the program.
    ```bash
    gcc MainProgram.c -o NDFSM_Builder
    ```

4. Run the program with the required arguments (pattern file and input file).
    ```bash
    ./NDFSM_Builder pattern1.txt input1.txt
    ```

5. The program will output:
   - **Yes**: If the input string contains the pattern as a substring.
   - **No**: If the input string does not contain the pattern.

### Example
#### Input
- `pattern1.txt`: Contains the pattern `abc`.
- `input1.txt`: Contains the input string `xabcy`.

#### Output
```
Input Pattern: abc
Input String: xabcy
NDFSM written to NDFSM.txt successfully!
Read NDFSM.txt successfully
Constructed DFSM.txt from the NDFSM.txt successfully
DFSM written to DFSM.txt successfully!
Input String: aabcbcaaaacccc
yes
```

## Error Handling
The program checks for several common errors:
- **Invalid Characters**: The pattern and input must contain only lowercase alphabet characters. Any other characters will raise an error.
- **Empty Files**: If either the pattern or input files are empty, the program will notify the user and terminate.
- **Malformed Transition Table**: During DFSM conversion, any errors in the transition table will be caught and handled appropriately.

## Future Enhancements
- Add support for more complex input patterns and broader alphabet sets.
- Provide a visual representation of the NDFSM and DFSM transition diagrams.
- Optimize the DFSM conversion for more efficient state handling.

## Contributing
Feel free to fork this project, raise issues, or submit pull requests. Contributions are always welcome!
